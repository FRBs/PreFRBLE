import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from pathway import *
from Convenience import *
from Physics import *
import numpy as np

root_data = root+'MHD-models/clues/'

def Histogram2Expectation( P, x, log=True, ):
    if log:
        x_log = np.log10(x)
        x_ = x_log[:-1] + np.diff(x_log)/2
    else:
        x_ = x[:-1] + np.diff(x)/2
    x_mean = np.average( x_, weights=P )
    x_std = np.sqrt( np.sum( P*( x_ - x_mean)**2 ) / np.sum( P ) )
    if log:
        x_mean = 10.**x_mean
    return x_mean, x_std



def MakeUniformProbability( model, N=1024, L=250e3/h, range=(1e-4,1e2), bins=100, log=True, posneg=False ):
    dx = L/N
    rho = np.fromfile( root_data + 'mass-density_clues.dat', dtype='float32' ).reshape( N, N, N ) * critical_density*OmegaBaryon  / (proton_mass*1.16)  # transform to electron number density in cm^-3
    B = np.fromfile( root_data + 'magnetic-field_clues_%s.dat' % model, dtype='float32' ).reshape( 3, N, N, N ) * 1e10  # Tesla -> muG
    if model == 'primordial':
        B /= 10.

    RM = []
    for i_ax in [-1,1]:
#    for i_ax in np.arange(2):
#        DM_, RM_ = DispersionMeasureIntegral( rho*(1.16*proton_mass), dx*kpc2cm, 0., 1e-6*B[i_ax] * (-1)**i_ax, axis=i_ax )
#        RM.extend( RM_.flatten() )
#        RM.extend( DM_.flatten() )
#        RM.extend( np.sum( 0.81*1e3*dx*rho*B[i_ax] * (-1)**i_ax, axis=i_ax ) ) 
        RM.extend( np.sum( i_ax*0.81*1e3*dx*rho, axis=i_ax ) )
    RM = np.array(RM)
    if log and not posneg:
        RM = np.abs(RM)
        
#    return histogram( RM, log=log, range=range, bins=bins, density=True )
    if posneg:
        Pp, xp = histogram( RM, log=log, range=range, bins=bins, density=True )
        Pn, xn = histogram( -RM, log=log, range=range, bins=bins, density=True )
        P, x = [Pp, Pn], [xp, xn]
    else:
        P, x = histogram( RM, log=log, range=range, bins=bins, density=True )
        print Histogram2Expectation( P, x, log=log )
    return P, x
    


def PlotUniformProbability( models, N=1024, L=250e3/h, range=(1e-4,1e2), bins=100, log=True, density=True, posneg=False ):
    if log:
        plt.loglog()
    for model in models:
        P, x = MakeUniformProbability( model, N=N, L=L, range=range, bins=bins, posneg=posneg )
        if posneg:
            for x_, P_, l in zip(x,P, ['-','--']):
                plt.plot( x_[:-1]+np.diff(x_)/2, P_ * np.diff(x_)**(not density), label=model if l=='-' else None, linestyle=l )
        else:
            plt.plot( x[:-1]+np.diff(x)/2, P, label=model )

    plt.legend()
    plt.xlabel( r"RM (rad/m$^2$)", fontdict={'size':16} )
    if density:
        plt.ylabel( 'P(RM)', fontdict={'size':16} )
    else:
        plt.ylabel( r"P(RM)$\Delta$RM", fontdict={'size':16} )
    plt.savefig( root_FRB + 'UniformProbability%s%s_RM.png' % ( 'posneg' if posneg else '', 'density' if density else '' ) )
    plt.close()

PlotUniformProbability( ['primordial', 'primordial2R', 'primordial3R', 'astrophysical', 'astrophysicalR', 'astrophysical1R' ][:2], range=(1e-1,1e4), density=False) #, posneg=True )# , density=False )
#PlotUniformProbability( ['primordial', 'primordial2R', 'primordial3R', 'astrophysical', 'astrophysicalR', 'astrophysical1R' ][:1], range=(1e-1,1e6), density=True, posneg=True )# , density=False )
